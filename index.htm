%% videos_llamas.m
% Genera videos MP4 (10 fps) a partir de imágenes .tif/.tiff
% para 3 carpetas: laminar, transicion, turbulenta.
% No requiere natsortfiles. Ordena por el número final en el nombre.

clear; clc;

% --------- Configura aquí tus carpetas y salidas ----------
S(1).folder = 'laminar';     S(1).out = 'laminar.mp4';
S(2).folder = 'transicion';  S(2).out = 'transicion.mp4';
S(3).folder = 'turbulenta';  S(3).out = 'turbulenta.mp4';

fps = 10;                    % 10 imágenes = 1 s
pattern = '*.tif*';          % recoge .tif y .tiff
forceResize = true;          % por si hay alguna imagen con tamaño distinto
targetSize  = [];            % se fija con el 1er frame (si forceResize=true)

for i = 1:numel(S)
    fprintf('\n=== %s ===\n', upper(S(i).folder));
    assert(exist(S(i).folder,'dir')==7, 'No existe la carpeta: %s', S(i).folder);

    L = dir(fullfile(S(i).folder, pattern));
    assert(~isempty(L), 'No se encontraron imágenes en %s con el patrón %s', S(i).folder, pattern);

    % ordenar por número al final
    names = {L.name}.';
    ord   = natorder_by_trailing_number(names);
    names = names(ord);

    % muestra verificación
    fprintf('Primeros 5:\n'); disp(string(names(1:min(5,numel(names)))).');

    % prepara el VideoWriter
    outmp4 = fullfile(S(i).folder, S(i).out);
    v = VideoWriter(outmp4, 'MPEG-4');
    v.FrameRate = fps;
    open(v);

    % fija tamaño objetivo con el primer frame (si forceResize)
    if forceResize
        I0 = imread(fullfile(S(i).folder, names{1}));
        if size(I0,3)==1
            I0 = repmat(mat2gray(I0), [1 1 3]);
        else
            I0 = im2double(I0);
        end
        targetSize = [size(I0,1) size(I0,2)];
        writeVideo(v, I0);
        startIdx = 2;
    else
        startIdx = 1;
    end

    % recorre el resto
    for k = startIdx:numel(names)
        Ik = imread(fullfile(S(i).folder, names{k}));
        if size(Ik,3)==1
            Ik = mat2gray(Ik);
            Ik = repmat(Ik, [1 1 3]);
        else
            Ik = im2double(Ik);
        end
        if forceResize
            if ~isequal([size(Ik,1) size(Ik,2)], targetSize)
                Ik = imresize(Ik, targetSize, 'bicubic');
            end
        end
        writeVideo(v, Ik);
    end

    close(v);
    fprintf('Listo: %s  (%d frames @ %d fps)\n', outmp4, numel(names), fps);
end

fprintf('\nHecho. Generados los 3 videos.\n');

% --------- Función auxiliar (orden “natural” por sufijo numérico) ---------
function ord = natorder_by_trailing_number(names)
% Busca dígitos antes de .tif/.tiff (case-insensitive) y ordena por ese número.
% Si algún nombre no tiene número final, cae a sort alfabético para ese caso.
    n = numel(names);
    nums = nan(n,1);
    for k = 1:n
        tok = regexp(names{k}, '(?i)_(\d+)\.tif{1,2}$', 'tokens', 'once');
        if ~isempty(tok)
            nums(k) = str2double(tok{1});
        end
    end
    % Manejo de faltantes
    hasNum = ~isnan(nums);
    if ~all(hasNum)
        % Usa sort alfabético dentro del grupo sin número y colócalos al final
        alphaNames = names(~hasNum);
        [~, ordAlpha] = sort(lower(alphaNames));
        nums(~hasNum) = max([0; nums(hasNum)]) + (1:numel(ordAlpha))';
    end
    [~, ord] = sort(nums);
end
